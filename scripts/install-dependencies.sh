#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Znak Lavki
# –î–ª—è macOS

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_step() {
    echo -e "\n${BLUE}==>${NC} ${1}"
}

print_success() {
    echo -e "${GREEN}‚úì${NC} ${1}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} ${1}"
}

print_error() {
    echo -e "${RED}‚úó${NC} ${1}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ macOS
if [[ "$(uname)" != "Darwin" ]]; then
    print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è macOS"
    exit 1
fi

print_step "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Znak Lavki..."

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew
print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Homebrew..."
if command -v brew &> /dev/null; then
    print_success "Homebrew —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(brew --version | head -n1)"
else
    print_warning "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Homebrew –≤ PATH –¥–ª—è Apple Silicon
    if [[ $(uname -m) == 'arm64' ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
    
    print_success "Homebrew —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js..."
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_success "Node.js —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${NODE_VERSION}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 18)
    NODE_MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_MAJOR_VERSION" -lt 18 ]; then
        print_warning "–í–µ—Ä—Å–∏—è Node.js < 18. –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ Node.js 18..."
        brew upgrade node || brew install node@18
        brew link --overwrite node@18
    fi
else
    print_warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js 18..."
    brew install node@18
    brew link --overwrite node@18
    print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(node --version)"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ pnpm
print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm..."
if command -v pnpm &> /dev/null; then
    PNPM_VERSION=$(pnpm --version)
    print_success "pnpm —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: v${PNPM_VERSION}"
else
    print_warning "pnpm –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pnpm 8..."
    npm install -g pnpm@8
    print_success "pnpm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: v$(pnpm --version)"
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version)
    print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${DOCKER_VERSION}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ Docker
    if ! docker info &> /dev/null; then
        print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop."
    else
        print_success "Docker –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
else
    print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω."
    echo ""
    echo "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Desktop:"
    echo "1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Homebrew (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):"
    echo "   ${BLUE}brew install --cask docker${NC}"
    echo ""
    echo "2. –ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é —Å:"
    echo "   https://www.docker.com/products/docker-desktop"
    echo ""
    read -p "–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker —á–µ—Ä–µ–∑ Homebrew —Å–µ–π—á–∞—Å? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        brew install --cask docker
        print_success "Docker Desktop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏–∑ Applications –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º"
        echo "–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ Docker Desktop –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        read
    else
        print_warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∂–µ."
    fi
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if command -v docker &> /dev/null; then
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
    if docker compose version &> /dev/null; then
        COMPOSE_VERSION=$(docker compose version)
        print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${COMPOSE_VERSION}"
    else
        print_warning "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –æ–±—ã—á–Ω–æ –≤—Ö–æ–¥–∏—Ç –≤ Docker Desktop"
    fi
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Git..."
if command -v git &> /dev/null; then
    GIT_VERSION=$(git --version)
    print_success "Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${GIT_VERSION}"
else
    print_warning "Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    brew install git
    print_success "Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
print_step "–°–≤–æ–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

if command -v brew &> /dev/null; then
    print_success "Homebrew: $(brew --version | head -n1)"
else
    print_error "Homebrew: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v node &> /dev/null; then
    print_success "Node.js: $(node --version)"
else
    print_error "Node.js: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v npm &> /dev/null; then
    print_success "npm: $(npm --version)"
else
    print_error "npm: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v pnpm &> /dev/null; then
    print_success "pnpm: v$(pnpm --version)"
else
    print_error "pnpm: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v docker &> /dev/null; then
    print_success "Docker: $(docker --version)"
    if docker info &> /dev/null; then
        print_success "Docker Status: –ó–∞–ø—É—â–µ–Ω ‚úì"
    else
        print_warning "Docker Status: –ù–µ –∑–∞–ø—É—â–µ–Ω ‚ö†"
    fi
else
    print_error "Docker: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v git &> /dev/null; then
    print_success "Git: $(git --version)"
else
    print_error "Git: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
ALL_INSTALLED=true

if ! command -v node &> /dev/null; then
    ALL_INSTALLED=false
fi

if ! command -v pnpm &> /dev/null; then
    ALL_INSTALLED=false
fi

if ! command -v docker &> /dev/null; then
    ALL_INSTALLED=false
fi

if [ "$ALL_INSTALLED" = true ]; then
    echo ""
    print_success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
    echo ""
    print_step "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:"
    echo "   ${BLUE}pnpm install${NC}"
    echo ""
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker —Å–µ—Ä–≤–∏—Å—ã:"
    echo "   ${BLUE}make docker-up${NC}"
    echo "   –∏–ª–∏"
    echo "   ${BLUE}docker-compose up -d${NC}"
    echo ""
    echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"
    echo "   ${BLUE}make dev${NC}"
    echo "   –∏–ª–∏"
    echo "   ${BLUE}pnpm run dev${NC}"
    echo ""
    print_success "–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"
else
    echo ""
    print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
    print_warning "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é."
fi

echo ""

