version: '3.8'

# PostgreSQL Replication Setup
# Primary (Master) + 2 Read Replicas for Analytics

services:
  # ============================================
  # PRIMARY DATABASE (MASTER)
  # ============================================
  postgres-primary:
    image: postgres:15-alpine
    container_name: znak-postgres-primary
    hostname: postgres-primary
    environment:
      POSTGRES_DB: ${DB_NAME:-znak_lavki}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      # Replication user
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-repl_password_123}
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./docker/postgres/replication/primary.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./docker/postgres/migrations:/docker-entrypoint-initdb.d/migrations
      - ./docker/postgres/replication/setup-replication.sh:/docker-entrypoint-initdb.d/02-setup-replication.sh
    ports:
      - "5432:5432"
    command: 
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    networks:
      - znak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-znak_lavki}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================
  # READ REPLICA 1 (Analytics)
  # ============================================
  postgres-replica-1:
    image: postgres:15-alpine
    container_name: znak-postgres-replica-1
    hostname: postgres-replica-1
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGUSER: ${DB_USER:-postgres}
      PGPASSWORD: ${DB_PASSWORD:-postgres}
      # Primary connection info
      PRIMARY_HOST: postgres-primary
      PRIMARY_PORT: 5432
      REPLICATION_USER: replicator
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-repl_password_123}
    volumes:
      - postgres-replica-1-data:/var/lib/postgresql/data
      - ./docker/postgres/replication/replica.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/replication/setup-standby.sh:/docker-entrypoint-initdb.d/setup-standby.sh
    ports:
      - "5433:5432"
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    networks:
      - znak-network
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================
  # READ REPLICA 2 (Analytics Backup)
  # ============================================
  postgres-replica-2:
    image: postgres:15-alpine
    container_name: znak-postgres-replica-2
    hostname: postgres-replica-2
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGUSER: ${DB_USER:-postgres}
      PGPASSWORD: ${DB_PASSWORD:-postgres}
      # Primary connection info
      PRIMARY_HOST: postgres-primary
      PRIMARY_PORT: 5432
      REPLICATION_USER: replicator
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-repl_password_123}
    volumes:
      - postgres-replica-2-data:/var/lib/postgresql/data
      - ./docker/postgres/replication/replica.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/replication/setup-standby.sh:/docker-entrypoint-initdb.d/setup-standby.sh
    ports:
      - "5434:5432"
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    networks:
      - znak-network
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================
  # PGBOUNCER (Connection Pooler)
  # ============================================
  pgbouncer:
    image: edoburu/pgbouncer:1.19.0
    container_name: znak-pgbouncer
    environment:
      DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres-primary:5432/${DB_NAME:-znak_lavki}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      MIN_POOL_SIZE: 10
      RESERVE_POOL_SIZE: 5
      RESERVE_POOL_TIMEOUT: 3
      SERVER_LIFETIME: 3600
      SERVER_IDLE_TIMEOUT: 600
    ports:
      - "6432:5432"
    networks:
      - znak-network
    depends_on:
      - postgres-primary
    restart: unless-stopped

  # ============================================
  # REDIS (Caching Layer)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: znak-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - znak-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ============================================
  # REDIS COMMANDER (GUI)
  # ============================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: znak-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - znak-network
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres-primary-data:
    driver: local
  postgres-replica-1-data:
    driver: local
  postgres-replica-2-data:
    driver: local
  redis-data:
    driver: local

networks:
  znak-network:
    driver: bridge

