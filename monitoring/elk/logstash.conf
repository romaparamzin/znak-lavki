# Конфигурация Logstash для обработки логов

input {
  # Получение логов из Filebeat
  beats {
    port => 5044
  }

  # Получение логов напрямую через TCP
  tcp {
    port => 5000
    codec => json
  }
}

filter {
  # Парсинг JSON логов
  if [type] == "json" {
    json {
      source => "message"
    }
  }

  # Парсинг логов NestJS
  if [service] =~ /^(api-gateway|mark-service|integration-service|notification-service)$/ {
    grok {
      match => {
        "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{LOGLEVEL:level} %{GREEDYDATA:log_message}"
      }
    }

    # Извлечение дополнительной информации
    if [log_message] =~ /Request/ {
      grok {
        match => {
          "log_message" => "Request %{WORD:http_method} %{URIPATH:uri_path}"
        }
      }
      mutate {
        add_tag => ["http_request"]
      }
    }

    # Определение severity
    if [level] == "ERROR" or [level] == "FATAL" {
      mutate {
        add_field => { "severity" => "error" }
        add_tag => ["error"]
      }
    } else if [level] == "WARN" {
      mutate {
        add_field => { "severity" => "warning" }
        add_tag => ["warning"]
      }
    }
  }

  # Парсинг логов PostgreSQL
  if [service] == "postgres" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{NUMBER:pid}\]: user=%{USERNAME:db_user},db=%{USERNAME:db_name},app=%{DATA:app_name},client=%{IPORHOST:client_ip} %{GREEDYDATA:sql_message}"
      }
    }

    # Извлечение медленных запросов
    if [sql_message] =~ /duration/ {
      grok {
        match => {
          "sql_message" => "duration: %{NUMBER:duration_ms} ms"
        }
      }
      mutate {
        convert => { "duration_ms" => "float" }
      }
      if [duration_ms] > 1000 {
        mutate {
          add_tag => ["slow_query"]
        }
      }
    }
  }

  # Добавление geo-информации по IP
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }

  # Удаление ненужных полей
  mutate {
    remove_field => ["agent", "ecs", "host"]
  }

  # Добавление общих меток
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:development}"
      "cluster" => "${CLUSTER:znak-lavki}"
    }
  }
}

output {
  # Отправка в Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "znak-lavki-%{[service]}-%{+YYYY.MM.dd}"
    
    # Аутентификация (если включена)
    # user => "elastic"
    # password => "changeme"
  }

  # Отправка критических ошибок в Alertmanager
  if "error" in [tags] and [severity] == "error" {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "labels" => {
          "alertname" => "ApplicationError"
          "service" => "%{service}"
          "severity" => "warning"
        }
        "annotations" => {
          "summary" => "Error in %{service}"
          "description" => "%{log_message}"
        }
      }
    }
  }

  # Debug output (закомментируйте в production)
  # stdout { codec => rubydebug }
}

